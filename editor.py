"""-----------------------------------------------------------
Teddy: A Tile Grid Editor for 2D square maps (FPS, RTS, RPG)
-----------------------------------------------------------
Created: May 11, 2019
Last Modified: March 2, 2020
version: 0.1.0
-----------------------------------------------------------
MIT Licence (Expat License Wording)
-----------------------------------------------------------
Copyright Â© 2012-2020, Damien Gouteux

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-----------------------------------------------------------
Code Summary
-----------------------------------------------------------
    Imports
    SimpleImage class
    Map class
    Dialog classes
        Dialog class
        ChooseObjectDialog class
        ChooseSizeDialog class
    LayerHandler class
    pic2str function
    ModInfo class
    ModHandler class
    Action class
    ActionList class
    OptionHandler class
    Application class
        Start
        Exit
        Map manipulation
        GUI building
        Apply texture functions
        Menu actions
   Main
-----------------------------------------------------------"""

#-----------------------------------------------------------
# Imports
#-----------------------------------------------------------

# Standard import
import json
import os
import os.path
#import configparser
import struct # pack
import importlib.util

from tkinter import Tk, TclError, PhotoImage, Menu, BooleanVar, StringVar, IntVar, Frame, Button,\
     SUNKEN, RAISED, LEFT, Label, Scrollbar, HORIZONTAL, VERTICAL, Canvas, E, BOTH, TOP, X, RIGHT, Y,\
     BOTTOM, NW, Toplevel, LabelFrame, Radiobutton, NORMAL, DISABLED
from tkinter import messagebox
from tkinter.filedialog import askopenfilename, asksaveasfilename
from tkinter.messagebox import showinfo
from functools import partial
from PIL import Image, ImageTk, ImageDraw

# Third party import
import typedini
from layeredmap import Map, Obj

#-----------------------------------------------------------
# Image class
#-----------------------------------------------------------

class SimpleImage:
    "A class for handling simple image, with both Pillow and Tkinter formats."

    def __init__(self, filepath, name=None, num=None):
        self.name = name
        self.num = num
        self.path = filepath
        self.img = Image.open(self.path).convert("RGBA")
        self.tkimg = ImageTk.PhotoImage(self.img)
        # only work with PNG and with Tkinter only PILLOW not needed
        # self.tkimg = PhotoImage(file=self.path)

    def __str__(self):
        return str(self.name)

    def __repr__(self):
        return self.path

#-----------------------------------------------------------
# Dialog
#-----------------------------------------------------------

class Dialog:

    def __init__(self, parent, **kwargs):
        self.top = Toplevel(parent.tk, takefocus=True)
        self.top.title('New Dialog')
        self.top.resizable(False, False)
        self.top.transient(parent.tk)
        self.parent = parent
        for key, val in kwargs.items():
            setattr(self, key, val)
        self.vars = {}
        self.build()

        self.top.protocol("WM_DELETE_WINDOW", self.cancel)
        self.top.geometry("+%d+%d" % (parent.tk.winfo_rootx()+50, parent.tk.winfo_rooty()+50))
        self.top.grab_set()
        self.top.wait_window(self.top)

    def build(self):
        pass

    def cancel(self):
        print(f"[INFO] {self.__class__.__name__} cancelled")
        self.close()

    def close(self):
        self.top.destroy()

    def __getattr__(self, var):
        res = None
        if var in self.vars:
            res = self.vars[var]
        return res

    def __getitem__(self, var):
        res = None
        if var in self.vars:
            res = self.vars[var]
        return res


class ChooseObjectDialog(Dialog):

    def build(self):
        self.object = None

        self.top.iconbitmap(os.path.join('media', 'icons', 'editor.ico'))
        Label(self.top, text="Select object:").pack()

        wh = Frame(self.top)

        ln = len(self.parent.objects)
        nb_rows = ln // 6 + 1
        nb_elem_by_row = ln // nb_rows
        cp = 0
        objnames = list(self.parent.objects.keys())
        for row in range(0, nb_rows):
            for col in range(0, nb_elem_by_row):
                b = Button(wh, image=self.parent.objects[objnames[cp]].tkimg,
                           width=32, height=32, command=partial(self.setval, objnames[cp]))
                b.grid(row=row, column=col)
                #print(row, col, objnames[cp], self.parent.objects[objnames[cp]].tkimg)
                cp += 1

        wh.pack(side=TOP, fill=BOTH)

        b = Button(self.top, text="Cancel", command=self.submit)
        b.pack(pady=5)

    def setval(self, val):
        print(f"[INFO] {val}")
        self.object = val
        self.close()

    def submit(self):
        self.close()

class ChooseSizeDialog(Dialog):

    def build(self):
        self.top.iconbitmap(os.path.join('media', 'icons', 'editor.ico'))

        if hasattr(self, 'title'):
            title = getattr(self, 'title')
        else:
            title = 'Map Size'
        self.top.title(title)

        Label(self.top, text="Map size:").pack()

        available_width = [32, 64, 128, 256]
        available_height = [32, 64, 128, 256]

        wh = Frame(self.top)

        self.widthVar = IntVar()
        self.widthVar.set(self.parent.map.width)
        self.heightVar = IntVar()
        self.heightVar.set(self.parent.map.height)

        w_group = LabelFrame(wh, text="Width", padx=5, pady=5)
        for w in available_width:
            b = Radiobutton(w_group, text=str(w), variable=self.widthVar, value=w)
            b.pack()
        w_group.pack(side=LEFT, padx=5)

        h_group = LabelFrame(wh, text="Height", padx=5, pady=5)
        for h in available_height:
            b = Radiobutton(h_group, text=str(h), variable=self.heightVar, value=h)
            b.pack()
        h_group.pack(side=RIGHT, padx=5)

        wh.pack(side=TOP, fill=X)

        b = Button(self.top, text="OK", command=self.submit)
        b.pack(pady=5)

    def submit(self):
        self.vars['width'] = self.widthVar.get()
        self.vars['height'] = self.heightVar.get()
        self.close()

#-----------------------------------------------------------
# Layer handler
#-----------------------------------------------------------

class ContentSet:
    """A content set is a set of SimpleImage.
       Each member of the set can be accessed through its name or its number.
       A composite content set is composed of two or more content set."""
    
    def __init__(self, mod, name, icon, subsets=None):
        self.mod = mod
        self.name = name
        self.icon = icon
        self.resources = {}
        self.num2name = {}
        self.name2num = {}
        self.subsets = subsets if isinstance(subsets, dict) and \
                                  len(subsets) > 0 and isinstance(subsets[next(iter(subsets))], ContentSet) else \
                                  {}
        self.loaded = False

    def is_composite(self):
        "Return True if the set is composite." 
        return len(self.subsets) != 0
    
    def __str__(self):
        return f"Loading ContentSet {self.name:15} ({len(self):5})"

    def __repr__(self):
        return str(self)

    def __len__(self):
        return len(self.resources)

    def register(self, name, val, file):
        "Register a resource file name in the content set but doesn't load it."
        self.resources[name] = file
        self.num2name[val] = name
        self.name2num[name] = val

    def get_default_num(self, val):
        "Get the number of the default content from its name or its number."
        if isinstance(val, str):
            if val in self.name2num:
                return self.name2num[val]
            else:
                for k, v in self.subsets.items():
                    if val in v.name2num:
                        return v.name2num[val]
                raise Exception(f"[ERROR] Impossible to find the code of {val} in ContentSet {self.name}")
        else:
            return val

    def load(self):
        "Load all the picture of the content set, creating the SimpleImage objects."
        if not self.is_composite() and not self.loaded:
            count = 0
            for name, f in self.resources.items():
                num = self.name2num[name]
                try:
                    self.resources[name] = SimpleImage(self.mod.autoload(f), name, num)
                    count += 1
                    if self.mod.debug:
                        print(f"[INFO]   + loaded for {self.name:10} [{count:2d}] : {name} -> {f}")
                except:
                    raise Exception(f"[ERROR] Impossible to load texture {f}.")
            self.loaded = True
        else:
            for _, contentset in self.subsets.items():
                if not contentset.loaded:
                    contentset.load()
                self.resources.update(contentset.resources)
                self.num2name.update(contentset.num2name)
                self.name2num.update(contentset.name2num)
            self.loaded = True
        return len(self)

    def __getitem__(self, val):
        if isinstance(val, int):
            val = self.num2name[val]
        elif not isinstance(val, str):
            raise Exception(f"Type unknwon for index: {type(val)}")
        if val not in self.resources:
            raise Exception(f"Texture '{val}' not found in {self}")
        return self.resources[val]


class LayerHandler:

    def __init__(self, name, content, default, apply, icon, pencil=1,
                 visible=True, obj=None, default_content=None):
        self.name = name
        self.res = content
        self.default = default
        self.pencil = pencil
        self.min = None
        self.max = None
        self.type = None # SimpleImage or Integer
        self.visible = visible
        self.apply = apply
        self.icon = icon
        self.obj = obj
        self.default_content = default_content

    def __str__(self):
        s = f"name={self.name} default={self.default} " + \
            f"pencil={self.pencil} visible={self.visible}"
        return s

#-----------------------------------------------------------
# Mod class
#-----------------------------------------------------------

def pic2str(file):
    f = open(file, mode='rb')
    content = f.read()
    f.close()
    return content

class ModInfo:

    def __init__(self, name, licence, creator, websites):
        self.name = name
        self.licence = licence
        self.creator = creator
        self.websites = websites

    def __str__(self):
        s = f"{self.name}\n{'_'*len(self.name)}\n{self.creator}\n{self.licence}\n"
        for w, url in self.websites.items():
            s += w + ' : ' + url + '\n'
        return s

class ModHandler:

    def __init__(self, application, code: str, force_recreate_default: bool = False):
        self.app = application
        self.debug = self.app.debug
        self.code = code
        self.info = {}
        self.layers = {}
        self.layer = None
        self.stakeholders = []
        self.plugin_file = None
        wrong = False
        self.mod_dir = os.path.join(os.getcwd(), 'mod')
        if force_recreate_default:
            self.create_default_mod()
        if not os.path.isdir(self.mod_dir):
            wrong = True
        else:
            self.detect_mods()
            if self.code not in self.info:
                wrong = True
            else:
                #try:
                self.load()
                #except:
                #    if self.debug: print('[ERROR] Something went wrong when loading mod ' +
                #                         self.code + '. Recovering.')
                #    wrong = True
        if wrong:
            self.create_default_mod()
            self.code = 'default'
            self.load()

    def __str__(self):
        return str(self.info[self.code])

    def get_loaded_mod(self):
        return self.code

    IMAGES = {
        'green.png'          : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x02\x00\x00\x00\xfc\x18\xed\xa3\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x00\tpHYs\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x006IDATHK\xed\xcd\xa1\x01\x000\x08\xc4\xc0\xa7\xa3t\x9e.\xcb\x865\xf8(\\\xceD\xa6n\xbfl:\xd35\x0e\x90\x03\xe4\x009@\x0e\x90\x03\xe4\x009@\x0e\x90\x03\x90|&y\x01_\xc9\xe9\xe5\xe5\x00\x00\x00\x00IEND\xaeB`\x82',
        'blue.png'           : b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x02\x00\x00\x00\xfc\x18\xed\xa3\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x00\tpHYs\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x00NIDATHK\xb5\xc71\r\x000\x0c\xc0\xb0\xf2\x87Qt\x85\xb1?\xb7'\xf9\xf1\xcc\xde_=\xd7s=\xd7s=\xd7s=\xd7s=\xd7s=\xd7s=\xd7s=\xd7s=\xd7s=\xd7s=\xd7s=\xd7s=\xd7s=\xd7s=\xd7s\xbd\xb5\xf7\x00\x1b\xdf([v\xdd\xdf|\x00\x00\x00\x00IEND\xaeB`\x82",
        'red.png'            : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x02\x00\x00\x00\xfc\x18\xed\xa3\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x00\tpHYs\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x007IDATHK\xed\xcd\xa1\x01\x000\x08\xc4\xc0\xa7sTv\xff\xcd\xd8\xa1\x06\x1f\x85\xcb\x99\xc8T\xdf\x97Mg\xba\xc6\x01r\x80\x1c \x07\xc8\x01r\x80\x1c \x07\xc8\x01r\x00\x92\x0f\xd1\x10\x01m\x9a\xa8\x01\x8a\x00\x00\x00\x00IEND\xaeB`\x82',
        'black.png'          : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x02\x00\x00\x00\xfc\x18\xed\xa3\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x00\tpHYs\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x00\x1aIDATHK\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7O\xedf\x0e \x00\x00\x80\xab\x01\x0c \x00\x016"\n\xad\x00\x00\x00\x00IEND\xaeB`\x82',
        'object-heart.png'   : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\xed\x1c$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xeeoeV\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00ZIDAT8O\xe5\xce1\x0e\x800\x0c\x04A\xfc\xffG\x9b\xe0,\xe4l\x8a\x80\x84\x90\x10[9\xc7\x14,>\xe9s\xc0\xac\x1e\xad\x01,\xd2#:@\x9f%\xf6\xcb\x80U\xeb\x1f^\x04\xd3\x9f|\x00T\xc1z\x07d\xc1\x96\x80\n\x96\x96\x82!xo%\xb0\x0b^Q\x06A\xb8\xa8\x82S\xbf\x00\xee+^\x9b\x04"\x8fZDs\x00\x00\x00\x00IEND\xaeB`\x82',
        'object-goldkey.png' : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\xff\xc9\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x1b\xb7\xf9\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00CIDAT8O\xed\x8bA\n\x00 \x08\x04\xeb\xff\x8f6\xdcU(("\xb1\x9b\x83.\xa8c\x93\x0b%\x90\x8d\xd0\x89M1\xc1Cq\xc1\xde\x08f\xee\x83\x02\xb0\xc3\x93\xa0\x81\x9eI\x15\x90Z\x0b.\x1c)\x81|\x17D\x06\x1a\x18\x84 jU\xbb\xdf\x00\x00\x00\x00IEND\xaeB`\x82',
        'layer-ground.png'   : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x02\x00\x00\x00\xfc\x18\xed\xa3\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x00\tpHYs\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x00\xaaIDATHK\xed\x8dK\x0e\x80 \x0cD9\x88K\xef\x7f3\xcf\xa0\x98i\x14\xa1\x1f\xacea\xc2d\xa2\xfc\xfa^\xca\xd9\x87\x85\xe8\x83\x1c\x04/7\x81\xb9\x8077\xd0Q\xa2\x1e\xd0\x10G\x05\xa9\x89\x1f\x1d\xed8\x83s;\xd8A\x9e\xe5pH#"\xe8\x95Cy\xacQ:\x1d\xfa3\x03\x91\x87\xcd\xd0S!\xb6\x80VB\xa6`\n\xa6\xe0\x1f\x023\xf4T\x88v\x9d\x87\xb7e5\xab;\xc4\xbbN:\xaa8\xf8\x8bWtTr0\xa7\x0e:\xca:\xea#7\x1dm\x1d\x8f\xfdG:Z9\xeeM\x08\x1d-\x1d\xb4\n\xa4\xa3\x97\xe3\xfc\x85\xd3Q8\xf2w\x08\x1dM)\x1d!(|\xe4\x89\x9d\x91\xc3\x00\x00\x00\x00IEND\xaeB`\x82',
        'layer-wall.png'     : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x02\x00\x00\x00\xfc\x18\xed\xa3\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x00\tpHYs\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x00\xd4IDATHK\xed\xd41\x12\xc20\x0cDQ+W\xa0\xa5\xe4\xfe\'\xa2\xa4\xe5\x0cf=\xd28\x89#\xc9I\xacT\xe4\x17\x10\x18\xb3\xaf\xc2\x94R\xca9\xe3\xf5\x8a\x88h\xfa>_x\x93/B\xc3,\xc6\'<]a\xf0:\x1e\n\x80b\x8d\xba\x8e\x04@Q\xc6r\x1d\xcd\x00\x1a7\x9au\xb4\x02\xd0\x88\xb1]G-\x80\xce\x19\xea:R\x00t\xd4\xb0\xd6\x91\x0e\xa0\xfd\x86\xb3\x8eL\x00\xb1\xd1\xcdYG\x1e\xc0\xe1"q\x92Cv}`\xb0\x1b\xe8v\x03\xdd\xfe\x01\x90\x0b\xc1H\x0e\xd9y\xc0\xe3\xf3\x96\x0b\xc1\r\xc7\xe4\x07Z&\xc0\xeb\xf2\xc1\xcd7t`\xff:\xe7\x18\npt\x9d\xb3\x8c\x168\xb7\xce\xa9\xc6\n\x18Y\xe7\xb6\xc6\x0c\x8c\xafs\x8d!@\xd4:\xb74\n\x10\xbb\xceU\xa3\xfc\x15\xc3\xd7kD\xf4\x03\xbdg\xb0\x9f\xe54\xdf-\x00\x00\x00\x00IEND\xaeB`\x82',
        'layer-ceiling.png'  : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x02\x00\x00\x00\xfc\x18\xed\xa3\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x00\tpHYs\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x00\xcdIDATHK\xed\x94A\x0e\x83 \x10E\x19\xaf\xd0m\x97\xbd\xff\x89\xba\xec\xb6g\xa0\x9f\x0cA\xc5a\x06e\x8ci\xe2K\x14\xa2\xe4\xbdH"\x14B\xf8>_\xb8\x9f\xc1\xe3\xf3\x9eb\x8c\x18\xf2\x03W\xa0\x85|\xc2\xec\x8c\x06\xdb1I\x01\xe0\xdb(v\x90\x03\xc0\xab\xb1\xb4\x839\x00\xc6\x1b\x95\x1d\xac\x02`\xa4\xb1\xb5\x83:\x00\x8e5D;\x10\x02`o\xa3e\x07r\x00\xf47\x14; \xe5\x1d J\xbf\xba\x8ea0\x03\x83\x0b\x9a[\xe4\xc5\x1d0\xb9\x03&\xff\x1f\xb8\xf4\xa80\x8f\x01F_\xd6\xdc\xa2N;\xc02\xe5C\xe5@\xbf\x9dQ\x1aB`\xaf\x9di5\xea\xc01;#6V\x81\x11;\xb3m\xcc\x81q;S5r\xc0\xcb\xce,\x1b)\xe0kgJ#]\xee\xf6\x02\x11\xfd\x00\x86\xde\xaa\xcf\x8dt\x1c\xb8\x00\x00\x00\x00IEND\xaeB`\x82',
        'layer-height.png'   : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x02\x00\x00\x00\xfc\x18\xed\xa3\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x00\tpHYs\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x00@IDATHKc\xa0\x07\xf8O30j\x01A0j\x01A@/\x0b\x86>x+\xa3B#4j\x01A4j\x01A4l,\x18\xfa\x00Z\xf4\xd1\x00\x8cZ@\x10\x8cZ@\x10\x0c\x1b\x0bh\x08\x18\x18\x00\xbeD1\xe6\xa7\x08\x82s\x00\x00\x00\x00IEND\xaeB`\x82',
        'layer-area.png'     : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\x00\x00::\x00\x00:\x00:\x00\x00f:\x00f::fB\x00(f\x00\x00f\x00:f:\x00uE\x00fff\x00:\x90\x00f\xb6:\x90\xb6:\x90\xdbf\xb6\xff\x90:\x00\xb6f\x00\xa4\x93f\xdb\x90:\xff\xb6f\xa4\xab\xb6\xa5\xac\xb6\xb2\xb9\xc1\xb6\xdb\x90\x90\xdb\xff\xbc\xc2\xc8\xb6\xff\xff\xff\xdb\x90\xff\xff\xb6\xd9\xdc\xe1\xdb\xff\xff\xff\xff\xdb\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Eya\x81\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00\xdcIDAT8O\xcd\x93[\x13\x82 \x10\x85\xc9\xb4\xec\xa2yI\x84\xbc\xcb\xff\xff\x8dv\x16\xb0\x99\x1c\x8b\x87|\xe8\xbc\x00\xbb\x1fgw\x1dd\x93C\x9b\x00\xbd\x14\xe5\xaa\x84\xec\t\xe8k\xf5Qu\x0f@\xda\xc3\xaa$\x00a\xf7\xab\x12\x00J\xbb_U\xb9\x19\xc0w\x95\t,e\x811\xbb\xc66\xb2\x90\x05\xda\xe0\x1146\xf4.\x0b\x14\xb1\xca\x13p\x87\xb3\xdft!\xf3\x01s\xc6\x18\\\r\xd0\x9d*\xc5\xa3A\xb5^\x8aj\xa9*\xa2\xa1\x0bS\xdd\x98\x01(I\x91v_\xa1Z\xa3/@\xb4h\x80g\xb0#CJ\xb6\x1e\xb6\xb8J\xeb\xecp\xd7\r\xe2\xba\x06L\xb7d\xf6r\xb8\x98\x11\xf3\x84\x92\xd4\x03V\x8eF\xf3\xd9\xe1h>\x12\xf7\xf5\xac\x98\x02\x89\x11eo`M\x93_\xf4/\x80\xf3\xc99\x1f\xad\xf3\xd9;\x7f\x1c\x87~\x05\xa6\xe9\tR\x8aR\x01\xc5\xaf\xb2\xce\x00\x00\x00\x00IEND\xaeB`\x82',
        'layer-object.png'   : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\x00\x00::\x00\x00:\x00:\x00\x00ff\x00\x00\x00:\x90\x00f\xb6:\x90\xdbf\x90\x90f\xb6\xff\xb6f\x00\xdb\x90:\xff\xb6f\xa4\xab\xb6\xa5\xac\xb6\xb2\xb9\xc1\x90\xdb\xff\xbc\xc2\xc8\xb6\xff\xff\xff\xdb\x90\xff\xff\xb6\xd9\xdc\xe1\xdb\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x86\xf9C \x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc2\x00\x00\x0e\xc2\x01\x15(J\x80\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00\xc6IDAT8O\xad\x93\xdb\x0e\xc2 \x0c\x86\x19\x1e6\xdd\x01\x98\x88\xbe\xff\x8bb\xdb\x95\x05"X\x13\xfd/H\xbb~\xf4@:\x15\x05\xfd\x05\x08\xd6,U\x19\x1b\x10\x08\xeb\xb3\xa95\x00`\xd9\xa9\xca\x02`\xd8\xae\xca\x00\xb0\xb0]\xd5\xf25\xe0\xb5R\xeaJ\x06\x9e\xbb\x91\x80\t\x83^\xf7\x19\xb0\x89\x01\x7fp\xe8\xddOC\x03\x18\xe1*j:?\xbc\xbe@\xb5\xa1,\x817Is\xe7\xbc\xee\x1c\x04S\xaa\x04pZ\xf8\x881Hu\xbc\xb5\x01\xb4)U\x0ed%\xa8_8s\xa0l\xb2\x92\x81\x1b\xe21\xa9\x87D2P<\x14L1\x83[\x02\xe0\xeeO\x8d\xef@x\x01\xbcK\x06h\x9c60*\x9a\xecC\x86M\x08\x88+\'.\xad\xb8\xf6\xe2\x8f#\xe8W \xc6\x17\xbe\x822c\xa5\xc5\xf7o\x00\x00\x00\x00IEND\xaeB`\x82',
        'num_hl_1.png'       : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\x0e\x00\x00\x00\x00\x1f\x08\x00\x1f\x08G\x1f\x1dd\x11\x1d\x7f6"\x98+"\xb16\x18\xb1L\x1d\xb1L"\xb1L\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9e\tj\xac\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc2\x00\x00\x0e\xc2\x01\x15(J\x80\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00FIDAT8Oc@\x02\xff\xb1\x01\x06\x06n\x18\xc0\xa7\x80\x9d\x99\x13\xaf\x02\x0eF&\xbc\nX\x19X\xf0\x9b\xc0\xc6E\xc8\n\x82n\x18\x1a\n\xc0\x00\x97\x02\x04\x80\n\xa1\x02\xec\xa2H`T\x01\x04\x8c*\x80\x00\x02\n\xfe\xff\x07\x00Ywf\xbc\xfa\x19@o\x00\x00\x00\x00IEND\xaeB`\x82',
        'num_hl_2.png'       : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\x00\x004\x00%\x00\x00\x00]\x00A\x00\x00[4\x00t]\x00%\x82\x00t\xe8\x00\x8b\x82\x00\xa2\xa6\x00\x8b\xe8\x00\xa2\xc8\x00\xa2\xe8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x89\xffA\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc2\x00\x00\x0e\xc2\x01\x15(J\x80\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00eIDAT8O\xed\x90[\x16\xc0\x10\x0cD\xf5\x11\xa5\xad\xfd/\x97A{\xaa\xe7\xc8\xd8\x80\xfb\xe1#\xb9\x13\xc24\xc4\x1e\xc6\x84\x17]\xf0H;"\x9c\xe8\xda\xe5\xd2\x05{\x84p\xaf\x8e\\\x01\xf2\x14*\x08\xa60A6\x1cD\x10<\x91\t%O\x04_\xf2D\xd8\xcb?\x0f\xb6\xc8h\xc2\xc7S\xfa\xd3\xaf6L\xa12\x85\xca@\x881\x01t\xa8g\x0etue9\x00\x00\x00\x00IEND\xaeB`\x82',
        'num_hl_3.png'       : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\x006\x00:\x00\x00:6\x00f\x00\x00\x90\xcf\x00\xb6\xf2\x00\xdb\x88\x00\xff\xac\x00\xdb\xf2\x00\xff\xcf\x00\xff\xf2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x92\x88\x99\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc2\x00\x00\x0e\xc2\x01\x15(J\x80\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00[IDAT8O\xed\xd0\xd1\x0e\x80 \x08\x85a\xd2P\xa3\xf7\x7f^\x82Y\xcb6=^t\xebw\xc9~\x19\x93\x1a\xdaCt>\xc6A\xb1\xd7\x0c\x02\tlM\x02\x1b\xdc\xce8\xc8\xdb\x81\x02\t\xf0\x06\xf7\xff\x06\x18\xf8z\x89\xe8\xc8l\x1f\x95&G\xbaQ\xf0\xbaG_\xfdic\x05\xd5\n\xaaI\xa0z\x01q\x19fr\x9c \x94l\x00\x00\x00\x00IEND\xaeB`\x82',
        'num_hl_4.png'       : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\x00\x00\x10\x00\x1c\n:\x00\x10:G!f\x00\x00f\x1c\x17fZ\'\x90\x1c\x10\xb63\x00\xb6m\x17\xb6\x7f\'\xdbG\n\xdb\x7f\'\xffZ\x10\xffm\x17\xff\x7f\x1c\xff\x7f!\xff\x7f\'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x0f0\xe8\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc2\x00\x00\x0e\xc2\x01\x15(J\x80\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00YIDAT8Oc@\x02\xff\xb1\x01\x06\x06!\x18\xc0\xa7\x80\x9f\x99\x1b\xbf\x02NF\xfc\n\xf8\x98\xf0\x9b \xc8\xc1\x85_\x01\x0f\x0b~7\x08\xb0\xf1\xe2W\xc0\xc9N\xc0\x17\xac\xe0Pb\xc7\xe3\x06"\xc2\x81\xa0\x020\xc0\xa5\x00\x01\xa0B\xa8\x00\xbb(\x12\x18U\x00\x01\xa3\n \x80\x80\x82\xff\xff\x01\xc3ih\xa9M5\xa9\x9f\x00\x00\x00\x00IEND\xaeB`\x82',
        'num_hl_5.png'       : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\x00\x00\x08\x00\x00\x0e\x00\x06\x14\x00\x0b\x195\x00\x005\x06\x005\x00\x085\x06\x145\x10\x1f_\x00\x08_\x00\x0e\x85\x06\x08\x85\x18$\xa9\x0b\x00\xa9\x1c$\xcc\x10\x08\xcc\x1c$\xed\x14\x0e\xed\x18\x14\xed\x1c\x19\xed\x1c\x1f\xed\x1c$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe9\x0e!\xb4\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc2\x00\x00\x0e\xc2\x01\x15(J\x80\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00fIDAT8O\xed\xd0K\x0e\x80 \x0cE\xd1\xe7_QD\x01\xd9\xffN\x11\x83FL\xa0\x0c\x9cr\x87\xcd\t4E\x90\x8d\x05\x98\xa74P\x1d\xd0\xec\x04\x90m\xe6\x85u\xa2\xc1\xb1p\x1ah\xd6\xa3r&\t\xd4\xc0\x8d\x9e\x05\xb1\x83K3\xfe\x03\xc8Z\x185Rw\xd8\x00g\xe8/\xaeR\xe0\xed\x1e}\x8bO\x83\n\xf0\x15\xe0\xcb\x00kO\x00"jHx\xe5\x83o\x00\x00\x00\x00IEND\xaeB`\x82',
        'num_hl_6.png'       : b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\x00\x00%%\x00%\x00\x00B\x00\x11\\%\x00B\\\x11\x00B\x00%t\x1d\x00t*%%*\x8dB4\xa4\\>\xa4tI\xa4\xa34B\xa3>\\\xa3Iu\x8cI\xa4\xa3I\x8d\xa3I\xa4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00O\n8t\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc2\x00\x00\x0e\xc2\x01\x15(J\x80\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00gIDAT8O\xed\xd0Y\x0e\x80 \x0cE\xd1\xaa\xa8(\x93\xc8\xfe\xd7\x8a\x18$bB\x9f\x1b\xe0~6'i\x81\xaab+\xa2P\xe2\xc1\xb9\x10\xed\x08H\xe1\xdd\xa8yp\xac\x1a\xafp\xb3\xc1\xc0\x8a\x8dH!\x90.\xb4\x03\xb8\xc1\n\x9f\x1e\xa2\xf0\r\x10\x04\x99VL\x06\x80\xfb\xa3\xd0\x91%\x0e\xbc=\xa3o\xediU\x07\xb9\x0er? \xc6\x0bQfh\xd9\x86\xc2\xc9M\x00\x00\x00\x00IEND\xaeB`\x82",
        'num_br_1.png'       : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\x0e\x00\x00\x00\x00\x1f\x08\x00\x1f\x08G\x1f\x1dd\x11\x1d\x7f6"\x98+"\xb16\x18\xb1L\x1d\xb1L"\xb1L\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9e\tj\xac\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc2\x00\x00\x0e\xc2\x01\x15(J\x80\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00BIDAT8Oc\xf8O\x00\x8c*\x80\x80Q\x05\x10@\xa6\x02\x06$\x00\x15B\x05\x0c\xdc0\x80O\x01;3\'^\x05\x1c\x8cLx\x15\xb02\xb0\xe07\x81\x8d\x8b\x90\x15\x04\xdd04\x14\x80\x01.\x050\xc0\xc0\x00\x00s^f\xbc:\xd6\xfdE\x00\x00\x00\x00IEND\xaeB`\x82',
        'num_br_2.png'       : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\x00\x004\x00%\x00\x00\x00]\x00A\x00\x00[4\x00t]\x00%\x82\x00t\xe8\x00\x8b\x82\x00\xa2\xa6\x00\x8b\xe8\x00\xa2\xc8\x00\xa2\xe8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\x89\xffA\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc2\x00\x00\x0e\xc2\x01\x15(J\x80\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00bIDAT8O\xed\xd0\xbb\x12\x80 \x0cD\xd1\xf8\x00A\xcd\xff\x7f\xae.Af\xb4\xc82c\xcd-,\xf4\x04\x04\xb9:\rP\x1b\xa0\xf6\x13\xc8\xab\xe7\xd57\xd1\x96\x0f2\x86\x13\x01;\xbe\xc6\xe9\xf0A\xdcT\xcf9\x91-PY\x85\x82\x80U\x18\x08\x0b\x1e\x04\x04\xfc"\x036O@\xb6y\x02V\xbb\xe6\xce)J\x1eh\x89\xdc\xc9\x82g\x0e\x88\x17\x04~\x00\x00\x00\x00IEND\xaeB`\x82',
        'num_br_3.png'       : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\x006\x00:\x00\x00:6\x00f\x00\x00\x90\xcf\x00\xb6\xf2\x00\xdb\x88\x00\xff\xac\x00\xdb\xf2\x00\xff\xcf\x00\xff\xf2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x92\x88\x99\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc2\x00\x00\x0e\xc2\x01\x15(J\x80\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00XIDAT8O\xed\xd0A\x0e\x80 \x0cD\xd1\x11-h\xbd\xffy\xb5\r\x90\xc0\x82!\xd1-oI>d\x02\x9e\x89\x15d+\xc8>\x06h\x94\xa3\x1e\xeej\x1c\x9cvYH\xa0A\xac\x89\xe4\x05w\x08\x0f\xd2v\xb1@\x03\xdd\xe0\xfeo\xa0\x81?\xaf;\x1b\x99\xec\xa3\xe2d\xa4\x1b\x05\x15\xf0\x02<\xd5fr\tY\xb8\\\x00\x00\x00\x00IEND\xaeB`\x82',
        'num_br_4.png'       : b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\x00\x00\x10\x00\x1c\n:\x00\x10:G!f\x00\x00f\x1c\x17fZ'\x90\x1c\x10\xb63\x00\xb6m\x17\xb6\x7f'\xdbG\n\xdb\x7f'\xffZ\x10\xffm\x17\xff\x7f\x1c\xff\x7f!\xff\x7f'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x0f0\xe8\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc2\x00\x00\x0e\xc2\x01\x15(J\x80\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00VIDAT8Oc\xf8O\x00\x8c*\x80\x80Q\x05\x10@\xa6\x02\x06$\x00\x15B\x05\x0cB0\x80O\x01?37~\x05\x9c\x8c\xf8\x15\xf01\xe17A\x90\x83\x0b\xbf\x02\x1e\x16\xfcn\x10`\xe3\xc5\xaf\x80\x93\x9d\x80/X\xc1\x81\xc4\x8e\xc7\rD\x84\x03A\x05`\x80K\x01\x0c00\x00\x00<\xb9h\xa9\xb96\x0cf\x00\x00\x00\x00IEND\xaeB`\x82",
        'num_br_5.png'       : b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\x00\x00\x08\x00\x00\x0e\x00\x06\x14\x00\x0b\x195\x00\x005\x06\x005\x00\x085\x06\x145\x10\x1f_\x00\x08_\x00\x0e\x85\x06\x08\x85\x18$\xa9\x0b\x00\xa9\x1c$\xcc\x10\x08\xcc\x1c$\xed\x14\x0e\xed\x18\x14\xed\x1c\x19\xed\x1c\x1f\xed\x1c$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe9\x0e!\xb4\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc2\x00\x00\x0e\xc2\x01\x15(J\x80\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00cIDAT8O\xed\xd0K\x0e\x80 \x0cE\xd1\xe7_\xd1\x8a\x02\xb2\xff\x9d*\x06Id@It\xca\x1d6'-\x01g\xa6\x02|\x05\xf8>\x02\xbczFq\xb0\xa14\xd0\x1d\xd0\xec\x0cPmf\xc3:\xf1\xe0X\x88\x07F\xf4\xa8\x9cI\x02=\x905\xb3d\xde\xe02\x82~\x00UK\xabG\xee\x1f6\xc0\x19\xfe\xc4]\n\x84\x80\x0b\x94.jHg%\x85~\x00\x00\x00\x00IEND\xaeB`\x82",
        'num_br_6.png'       : b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x03\x00\x00\x00D\xa4\x8a\xc6\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x03\x00PLTE\x00\x00\x00\x00\x00%%\x00%\x00\x00B\x00\x11\\%\x00B\\\x11\x00B\x00%t\x1d\x00t*%%*\x8dB4\xa4\\>\xa4tI\xa4\xa34B\xa3>\\\xa3Iu\x8cI\xa4\xa3I\x8d\xa3I\xa4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00O\n8t\x00\x00\x01\x00tRNS\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00S\xf7\x07%\x00\x00\x00\tpHYs\x00\x00\x0e\xc2\x00\x00\x0e\xc2\x01\x15(J\x80\x00\x00\x00\x18tEXtSoftware\x00Paint.NET v3.36\xa9\xe7\xe2%\x00\x00\x00cIDAT8O\xed\xd0\xcd\n\x80 \x18D\xd1\xa9\xac,\xff2\xdf\xffY\xcb\xb0\x0fj\xe1\x04\xad\xbdK9\xe0(\x8e\x8f\x1a(5P\xfa\t\xf0\xe8>z\x87$\xd5\xc1>\x01+\x03Z\xc5\xd0\xdb:\xd8f\xcb\xaf\x08\xa3\xe3\xc0\xab\x050\x0c\xe4\x85\xbe#\x1b\xbc\x8a\xf9!\x86o\xa0 \xe9|\xc5\xe0\x08\xb8>\x8a\x8d\x94j@\x02NWWh\xd9\x002\x17\xba\x00\x00\x00\x00IEND\xaeB`\x82'
    }

    def create_default_mod(self):
        os.makedirs(self.mod_dir, exist_ok=True)
        default_dir = os.path.join(self.mod_dir, 'default')
        os.makedirs(default_dir, exist_ok=True)
        f = open(os.path.join(default_dir, 'default.mod'), mode='w',
                 encoding='utf8')
        data = {
            'filetype' : 'mod',
            'version' : 1.0,
            'name' : 'Default',
            'licence' : 'Creative Commons Zero (CC0)',
            'creator' : 'Created by Damien Gouteux',
            'websites' : {
                'Main' : 'https://xitog.github.io/dgx/'
            },
            'layers' : {
                'ground': {'res': "textures", 'default': "blue",
                           'apply': 'green', 'visible': True, 'icon': 'ground'},
                'wall': {'res': "textures", 'default': 0,
                         'apply': 'black', 'visible': True, 'icon': 'wall'},
                'ceiling': {'res': "textures", 'default': 0,
                            'apply': 'red', 'visible': False, 'icon': 'ceiling'},
                'height': {'res': "numbers_HL", 'default': "one",
                           'apply': 'two', 'visible': False, 'icon': 'height'},
                'area': {'res': "numbers_BR", 'default': 0,
                         'apply': 'one', 'visible': False, 'icon': 'area'},
                'object': {'res': "objects", 'default': 0,
                           'apply': 'heart', 'visible': True, 'icon': 'object'}
            },
            'resources' : {
                'textures': {
                    'icon': 'black',
                    'content' : {
                        'black': {'val': 1, 'file': 'black.png'},
                        'blue': {'val': 2, 'file': 'blue.png'},
                        'green': {'val': 3, 'file': 'green.png'},
                        'red': {'val': 4, 'file': 'red.png'}
                    }
                },
                'objects' : {
                    'icon': 'heart',
                    'content': {
                        'heart': {'val': 1, 'file': 'object-heart.png'},
                        'goldkey': {'val': 2, 'file': 'object-goldkey.png'}
                    }
                },
                'numbers_HL' : {
                    'icon': 'one',
                    'content': {
                        'one': {'val': 1, 'file': 'num_hl_1.png'},
                        'two': {'val': 2, 'file': 'num_hl_2.png'},
                        'three': {'val': 3, 'file': 'num_hl_3.png'},
                        'four': {'val': 4, 'file': 'num_hl_4.png'},
                        'five': {'val': 5, 'file': 'num_hl_5.png'},
                        'six': {'val': 6, 'file': 'num_hl_6.png'}
                    }
                },
                'numbers_BR' : {
                    'icon': 'one',
                    'content': {
                        'one': {'val': 1, 'file': 'num_br_1.png'},
                        'two': {'val': 2, 'file': 'num_br_2.png'},
                        'three': {'val': 3, 'file': 'num_br_3.png'},
                        'four': {'val': 4, 'file': 'num_br_4.png'},
                        'five': {'val': 5, 'file': 'num_br_5.png'},
                        'six': {'val': 6, 'file': 'num_br_6.png'}
                    }
                },
                'icons' : {
                    'icon': 'ground',
                    'content': {
                        'ground': {'val': 1, 'file': 'layer-ground.png'},
                        'wall': {'val': 2, 'file': 'layer-wall.png'},
                        'ceiling': {'val': 3, 'file': 'layer-ceiling.png'},
                        'height': {'val': 4, 'file': 'layer-height.png'},
                        'area': {'val': 5, 'file': 'layer-area.png'},
                        'object': {'val': 6, 'file': 'layer-object.png'}
                    }
                }
            },
            "stakeholders" : {
                "Player 1": { "val": 1, "color": "blue"   },
                "Player 2": { "val": 2, "color": "red"    },
                "Player 3": { "val": 3, "color": "green"  },
                "Player 4": { "val": 4, "color": "yellow" }
            },
            'default_layer': 'wall',
            'has_transition': True
        }
        json.dump(data, f, indent='    ')

    def autoload(self, filename):
        #if self.debug: print(f"[INFO] autoload -> Loading {filename}")
        graphics_dir = os.path.join(self.mod_dir, self.code, 'graphics')
        if not os.path.isdir(graphics_dir):
            os.makedirs(graphics_dir)
        target = os.path.join(graphics_dir, filename)
        if not os.path.isfile(target):
            if filename not in ModHandler.IMAGES:
                if self.debug: print(f"[ERROR] autoload -> {filename} not found in dynamic image library, defaulting to black.png")
                filename = 'black.png'
            f = open(target, mode='wb')
            f.write(ModHandler.IMAGES[filename])
            f.close()
        return target

    def detect_mods(self):
        if self.debug:
            print('[INFO] Detecting mods:')
        all_mod_dir = os.path.join(os.getcwd(), 'mod')
        for mod in os.listdir(all_mod_dir):
            if self.debug:
                print('[INFO]     Mod found:', mod)
            mod_dir = os.path.join(os.getcwd(), 'mod', mod)
            if os.path.isdir(mod_dir):
                mod_file = os.path.join(mod_dir, mod + '.mod')
                if os.path.isfile(mod_file):
                    f = open(mod_file, mode='r', encoding='utf8')
                    data = json.load(f)
                    f.close()
                    self.info[mod] = ModInfo(data['name'], data['licence'], data['creator'], data['websites'])

    def load_graphics(self):
        # Load mod graphical resources. Tk() object must be created.
        if self.debug: print(f"[INFO] Loading mod *** {self.code} *** graphical resources")
        count = 0
        for _, ct in self.resources.items():
            # replace the string by the actual SimpleImage
            count += ct.load()
            print(f"[INFO]     {ct}")
            # replace the name of the icon by the actual SimpleImage for contentsets
            if ct.icon is not None:
                ct.icon = ct[ct.icon]
        if self.debug:
            print(f"[INFO]     = {count} graphics loaded")
        # replace the name of the icon by the actual SimpleImage for layers
        for _, lay in self.layers.items():
            lay.icon = self.resources['icons'][lay.icon]

    def load(self):
        if self.debug: print(f"[INFO] Loading mod *** {self.code} ***")
        mod_dir = os.path.join(self.mod_dir, self.code)
        mod_file = os.path.join(mod_dir, self.code + '.mod')
        self.current_start_pos = None
        f = open(mod_file, 'r', encoding='utf8')
        self.mod_data = json.load(f)
        f.close()
        self.mod_data['graphics_dir'] = os.path.join(mod_dir, 'graphics')
        # Prepare resources
        self.resources = {}
        for resname, resdata in self.mod_data['resources'].items():
            if self.debug: print(f'[INFO] - Loading resource <{resname}>')
            resicon = resdata['icon']
            rescontent = resdata['content']
            self.resources[resname] = ContentSet(self, resname, resicon)
            for objname, objcontent in rescontent.items():
                self.resources[resname].register(objname, objcontent['val'],
                                                 objcontent['file'])
        # Prepare layers
        self.layers.clear()
        for layname, laycontent in self.mod_data["layers"].items():
            obj = None
            if 'object' in laycontent:
                obj = laycontent['object']
                if obj not in self.mod_data["types"]:
                    raise Exception('[ERROR] Undefined type: ' + obj)
                obj = Obj(obj, self.mod_data["types"][obj])
            if isinstance(laycontent['res'], list):
                vname = '::'.join(laycontent['res'])
                sub = {}
                for n in laycontent['res']:
                    sub[n] = self.resources[n]
                self.resources[vname] = ContentSet(self, vname, None, sub)
                default_content = laycontent['res'][0]
                laycontent['res'] = vname
            else:
                default_content = laycontent['res']
            self.layers[layname] = LayerHandler(layname,
                                                self.resources[laycontent['res']],
                                                laycontent['default'],
                                                laycontent['apply'],
                                                laycontent['icon'], 1,
                                                laycontent['visible'],
                                                obj, default_content)
        self.layer = self.layers[self.mod_data["default_layer"]]
        self.stakeholders = self.mod_data["stakeholders"]
        # Load plugin
        path = os.path.join(mod_dir, self.code + '.py')
        if os.path.isfile(path):
            self.plugin_file = os.path.join(mod_dir, self.code + '.py')
        if self.debug: print(f"[INFO] Mod *** {self.code} *** loaded.")

#-----------------------------------------------------------
# Action class (for undo/redo)
#-----------------------------------------------------------

class Action:

    def __init__(self, app, amap, layer, start_x, start_y, x32, y32, content, pencil):
        #print(f"[INFO] Action on map '{amap.name}' on layer '{layer.name}' with {content} and pencil={pencil}")
        self.app = app
        self.map = amap
        self.layer = layer
        self.start_x = start_x if start_x is not None else x32
        self.start_y = start_y if start_y is not None else y32
        self.x32 = x32
        self.y32 = y32
        self.content = content
        self.pencil = pencil
        self.changes = []
        self.resolve()

    def resolve(self):
        if self.pencil == 1:
            start_x = self.x32
            end_x = self.x32 + 1
            start_y = self.y32
            end_y = self.y32 + 1
            if self.start_x != self.x32 or self.start_y != self.y32:
                start_x = min(self.start_x, self.x32)
                end_x = max(self.start_x, self.x32) + 1
                start_y = min(self.start_y, self.y32)
                end_y = max(self.start_y, self.y32) + 1
        elif self.pencil == 3:
            start_x = self.x32 - 1
            end_x = self.x32 + 2
            start_y = self.y32 - 1
            end_y = self.y32 + 2
        elif self.pencil == 5:
            start_x = self.x32 - 2
            end_x = self.x32 + 3
            start_y = self.y32 - 2
            end_y = self.y32 + 3
        for x in range(start_x, end_x):
            row = []
            for y in range(start_y, end_y):
                if 0 <= x < self.map.width and 0 <= y < self.map.height:
                    row.append((y, x, self.map.get(y, x, self.layer.name)))
                    #print(f"set   ({y}, {x}) -> {self.content} {self.layer.name}")
                    if not self.map.has_objects(self.layer.name):
                        act = self.map.set(self.content, y, x, self.layer.name)
                    else:
                        definition = self.layer.obj
                        instance = { 'x': x, 'y': y}
                        for key, val in definition.attr.items():
                            if val == 'Content_Name':
                                instance[key] = self.layer.res[self.content].name
                            elif val == 'Meta_Player':
                                instance[key] = self.app.varPlayer.get()
                            else:
                                raise Exception('[ERROR] Unknwon type: ' + val)
                        instance['val'] = self.content
                        act = self.map.set(instance, y, x, self.layer.name)
                    self.changes.append(act)
                    self.app.refresh_tile(y, x)
        self.done = True

    def unresolve(self):
        #print("unresolve")
        for act in self.changes:
            self.map.set(act['prev'], act['row'], act['col'], act['name'])
            self.app.refresh_tile(act['row'], act['col'])
        self.done = False


class ActionList:

    def __init__(self, max_size):
        self.previous = []
        self.max_size = max_size

    def do(self, app, amap, layer, start_x, start_y, x32, y32, content, pencil):
        if not amap.check(col=x32, row=y32): 
            return
        if start_x is not None and not amap.check(start_x, start_y):
            return
        do = False
        if start_x == x32 and start_y == y32:
            if not amap.check(col=x32, row=y32) or \
               amap.get(row=y32, col=x32, layer=layer.name) == content:
                return
        self.previous.append(Action(app, amap, layer, start_x, start_y,
                                    x32, y32, content, pencil))
        if len(self.previous) > self.max_size:
            del self.previous[0]

    def undo(self):
        if len(self.previous) > 0:
            self.previous[-1].unresolve()
            self.previous.pop()

#-----------------------------------------------------------
# Application class
#-----------------------------------------------------------

class Application:

    def __init__(self, debug=False):
        self.title = 'Tile Grid Editor'
        self.debug = debug

        self.options = typedini.OptionSet('config.ini', autosave=True)
        self.options.register('show_grid', bool, True)
        self.options.register('confirm_exit', bool, True)
        self.options.register('mod', str, 'default')
        self.options.register('width', int, 800)
        self.options.register('height', int, 600)
        self.options.read_or_create()

        self.mod = ModHandler(self, self.options['mod'], force_recreate_default=True)
        self.options['mod'] = self.mod.get_loaded_mod()
        if self.debug: print(f'[INFO] ModHandler created with mod {self.options["mod"]}')
        self.tk = None
        self.dirty = False
        self.plugin_code_menu = None
        self.bt_sep = None
        self.bt_layers = {}
        self.bt_textures = {}
        self.bt_contentsets = {}
        self.bt_pencils = None
        self.background = None
        self.varShowGrid = None
        self.varPencils = None
        self.varMods = None
        self.varVisibleLayers = None
        self.varActiveLayer = None
        self.varPlayer = None
        self.content = None
        self.toolbar = None
        self.toolbar_content = None
        self.canvas = None
        self.status_bar = None
        self.var_status_bar_content = None
        self.var_status_bar_display = None
        self.start_x = None
        self.start_y = None
        self.drag = False
        self.drag_rect = None
        self.icons = {}
        self.map = None
        self.start_new_map()
        self.previous = ActionList(50)
        self.run()

    #-----------------------------------------------------------
    # Start
    #-----------------------------------------------------------
    def start_new_map(self, title=None, width=None, height=None, restart=False):
        "Start application with a new map, build entire GUI"
        if self.debug: print(f'[CALL] Application#start_new_map')
        title = 'New map' if title is None else title
        width = 32 if width is None else width
        height = 32 if height is None else height
        self.dirty = False
        self.map = Map(self, title, width, height)
        for _, lay in self.mod.layers.items():
            def_code = lay.res.get_default_num(lay.default)
            obj = lay.obj
            self.map.add_layer(lay.name, def_code, obj)
        if not restart:
            self.build_gui() # need the size of the map in order to create the scrollbars
        else:
            self.canvas.config(scrollregion=(0, 0, self.map.width * 32, self.map.height * 32))
        self.refresh_map() # need the canvas in order to display the map

    def charge_mod(self, mod):
        self.clean_layer_buttons()
        self.options['mod'] = mod
        self.mod = ModHandler(self, self.options['mod'], force_recreate_default=True)
        self.options['mod'] = self.mod.get_loaded_mod()
        self.action_change_pencil('data', self.mod.layer.pencil)
        self.load_mod()
        self.varActiveLayer.set(self.mod.layer.name) # needed AFTER building buttons

    def start_load_mod(self, mod):
        "Load a different mod or a map with optionnally a new mod. Partial GUI"
        if self.debug:
            print('[INFO] start_load_mod: Loading {mod} {amap}')
        self.charge_mod(mod)
        self.start_new_map(restart=True)
        self.refresh_status()

    def start_load_map(self, mapfilepath):
        "Load a map. Partial GUI rebuild."
        if self.debug:
            print(f'[INFO] start_load_map: Loading {mapfilepath}')
        map_mod = Map.get_mod(mapfilepath)
        if map_mod != self.mod.code:
            print(f'[INFO] map is not from the current mod {self.mod.code}. Loading {map_mod}...')
            self.charge_mod(map_mod)
        amap = Map.from_json(self, mapfilepath)
        if self.debug:
            print(f'[INFO] start_load_map: Mod of map is {amap.app.mod.code}')
        self.dirty = False
        self.map = amap
        self.canvas.config(scrollregion=(0, 0, self.map.width * 32, self.map.height * 32))
        self.refresh_map() # need the canvas in order to display the map
        self.refresh_status()

    def exit_app(self, force_exit=False):
        "Exit the application and clean before"
        sure = True
        if self.dirty and self.options['confirm_exit']:
            txt = "There are unsaved changes.\nDo you really want to quit?"
            sure = messagebox.askyesno("Unsaved changes", txt,
                                       default=messagebox.NO)
        if sure:
            if self.debug:
                print('[INFO] Exiting')
            self.options['width'] = self.tk.winfo_width()
            # don't know why but the window is downsized of 20 pixels compared to asked geometry
            self.options['height'] = self.tk.winfo_height() + 20
            self.canvas.destroy()
            self.tk.destroy()

    def is_linked(self):
        "If the map is linked to a file on the hard drive"
        return self.map.filepath is not None

    def action_change_pencil(self, index, value, op=None):
        # index is an index of TKINTER OR the source of the call which can be button (from a button) or data (from code). In both case, the value is retrieved from the arg and op is not used.
        if self.debug:
            print(f'[INFO] action_change_pencil : {index} {value}')
        if index in ['button', 'data']:
            if value != self.varPencils.get():
                self.varPencils.set(value) # will call again action_change_pencil
        else:
            if self.debug:
                print('[INFO] Refreshing data and bt_pencils')
            self.mod.layer.pencil = self.varPencils.get()
            for val, bt in self.bt_pencils.items():
                if val == self.mod.layer.pencil:
                    bt.config(relief=SUNKEN)
                else:
                    bt.config(relief=RAISED)
            self.refresh_status()

    def action_change_texture(self, index, value, op=None):
        if index in ['button', 'data']:
            for key, bt in self.bt_textures.items():
                if value == self.mod.layer.res[key].num:
                    bt.config(relief=SUNKEN)
                    self.mod.layer.apply = self.mod.layer.res[key].name
                else:
                    bt.config(relief=RAISED)
            self.refresh_status()

    def action_change_set(self, index, value, op=None):
        if index in ['button', 'data']:
            for key, bt in self.bt_contentsets.items():
                if value == key:
                    bt.config(relief=SUNKEN)
                    self.mod.layer.default_content = value
                    for _, image in self.mod.layer.res.subsets[value].resources.items():
                        if image.num != 0:
                            self.mod.layer.apply = image.name
                            break
                    self.build_content_buttons()
                else:
                    bt.config(relief=RAISED)
            self.refresh_status()

    def action_change_layer(self, index, value, op=None):
        if self.debug:
            print(f'[INFO] action_change_layer : index={index} value={value}')
        if index in ['button', 'data']:
            if value != self.varActiveLayer.get():
                self.varActiveLayer.set(value) # will call again action_change_layer
        else:
            if self.debug:
                print('[INFO] Refreshing data and bt_layers')
            value = self.varActiveLayer.get()
            self.mod.layer = self.mod.layers[value]
            for key, bt in self.bt_layers.items():
                if key == value:
                    bt.config(relief=SUNKEN)
                else:
                    bt.config(relief=RAISED)
            self.action_change_pencil('data', self.mod.layer.pencil)
            self.build_content_buttons()
            self.refresh_status()
            if not self.mod.layer.visible:
                self.mod.layer.visible = True
                self.action_change_visibility('data', True)

    def action_change_visibility(self, index, value, op=None):
        # if there is incoherency between vars and py vars, we resolve it depending on the var which is the default from the menu
        if self.debug:
            print(f'[INFO] action_change_visibility : {index} {value}')
        if index == 'data':
            self.varVisibleLayers[self.mod.layer.name].set(self.mod.layers[self.mod.layer.name].visible)
        else:
            if self.debug:
                print('[INFO] Searching for incoherency')
            for name, var in self.varVisibleLayers.items():
                if var.get() != self.mod.layers[name].visible:
                    self.mod.layers[name].visible = var.get()
            self.refresh_map()

    def menu_change_mod(self, index, value, op):
        if self.varMods.get() != self.options['mod']:
            if self.dirty and self.options['confirm_exit']:
                save = messagebox.askyesno("Unsaved changes", "Do you want to save unsaved changes on the current map?", default=messagebox.YES)
                if save:
                    self.save_map()
            self.start_load_mod(self.varMods.get())

    def load_mod(self):
        self.mod.load_graphics()
        self.build_layer_buttons()
        self.load_mod_code()
    
    def display_info(self, title, msg):
        "Display an infobox for plugin"
        showinfo(title, msg)

    def load_mod_code(self):
        if self.debug:
            print("[INFO] Loading mod plugin code.")
        # clean
        last_item = self.plugin_code_menu.index("end")
        if last_item is not None:
            for item_count in range(last_item+1):
                self.plugin_code_menu.delete(item_count)
        # load
        if self.mod.plugin_file is not None:
            spec = importlib.util.spec_from_file_location("plugin", self.mod.plugin_file)
            module = importlib.util.module_from_spec(spec)
            #sys.modules[module_name] = module #XXX
            spec.loader.exec_module(module)
            if len(module.exports) > 0:
                for name, fun in module.exports.items():
                    self.plugin_code_menu.add_command(label=name, command=lambda: fun(self))
                self.plugin_code_menu.master.entryconfig("Plugins", state=NORMAL)
            else:
                self.plugin_code_menu.master.entryconfig("Plugins", state=DISABLED)
        else:
            self.plugin_code_menu.master.entryconfig("Plugins", state=DISABLED)

    def build_layer_buttons(self):
        "Create dynamic buttons for the layers of the mod. Tk() and toolbar objects must be created."
        if self.debug:
            print(f'[INFO] Creating layer buttons (previous len={len(self.bt_layers) if self.bt_layers is not None else 0})')
        if self.bt_layers is not None and len(self.bt_layers) > 0:
            self.clean_layer_buttons()
        # Layer buttons
        for layname, lay in self.mod.layers.items():
            self.bt_layers[layname] = Button(self.toolbar, image=lay.icon.tkimg,
                                             width=32, height=32,
                                             command=partial(
                                                 self.action_change_layer,
                                                 'button', layname))
            if self.mod.layer.name == layname:
                self.bt_layers[layname].config(relief=SUNKEN)
            else:
                self.bt_layers[layname].config(relief=RAISED)
            self.bt_layers[layname].pack(side=LEFT)
        self.build_content_buttons()

    def build_content_buttons(self):
        "Create dynamic buttons for the textures of the layer."
        if hasattr(self, 'bt_textures') and self.bt_textures is not None and len(self.bt_textures) > 0:
            self.clean_content_buttons()
            self.clean_content_set_buttons()
        contentset = self.mod.layer.res
        if contentset.is_composite():
            contentset = contentset.subsets[self.mod.layer.default_content]
        for _, res in contentset.resources.items():
            #print(f'[INFO] Creating button for {self.layer.name} : {res.name}')
            self.bt_textures[res.name] = Button(self.toolbar_content,
                                                image=res.tkimg, width=32,
                                                height=32,
                                                command=partial(
                                                    self.action_change_texture,
                                                    'button', res.num))
            if self.mod.layer.apply == res.name:
                self.bt_textures[res.name].config(relief=SUNKEN)
            self.bt_textures[res.name].pack(side=LEFT)
        # If we have a composite layer (multiple content sets)
        if self.mod.layer.res.is_composite():
            self.bt_sep = Label(self.toolbar, text=" ")
            self.bt_sep.pack(side=LEFT)
            for name, sub in self.mod.layer.res.subsets.items():
                self.bt_contentsets[name] = Button(self.toolbar,
                                                   image=sub.icon.tkimg,
                                                   width=32, height=32,
                                                   command=partial(
                                                       self.action_change_set,
                                                       'button', name))
                if self.mod.layer.default_content == name:
                    self.bt_contentsets[name].config(relief=SUNKEN)
                self.bt_contentsets[name].pack(side=LEFT)

    def clean_layer_buttons(self):
        "Clean dynamic buttons for the layers and the textures."
        for _, button in self.bt_layers.items():
            button.destroy()
        self.bt_layers.clear()
        self.clean_content_buttons()

    def clean_content_buttons(self):
        "Clean dynamic buttons for the textures of the layer. Tk() object must be created."
        for _, button in self.bt_textures.items():
            button.destroy()
        self.bt_textures.clear()

    def clean_content_set_buttons(self):
        "Clean dynamic buttons for the content sets of the layer if they are several of them."
        if self.bt_sep is not None:
            self.bt_sep.destroy()
            self.bt_sep = None
        if self.bt_contentsets is not None:
            for _, button in self.bt_contentsets.items():
                button.destroy()
            self.bt_contentsets.clear()

    #-----------------------------------------------------------
    # Map manipulation
    #-----------------------------------------------------------
    def rename_map(self, name):
        "Rename current map."
        self.map.set_name(name)
        self.dirty = True
        self.refresh_title()

    def save_map(self, filepath=None):
        "Save current map."
        if filepath is None and self.map.filepath is None:
            name, filepath = self.get_target()
            if name is None:
                if self.debug:
                    print("[INFO] Unable to save to None")
                return
        elif filepath is None:
            filepath = self.map.filepath
        self.map.save(filepath)
        self.dirty = False
        self.refresh_title()

    def refresh_title(self):
        "Refresh the window title depending on the name of the map."
        if self.map is None:
            txt = f'{self.title}'
        else:
            dirty = '*' if self.dirty else ''
            txt = f'{self.title} - {self.map.name} {dirty}'
        self.tk.title(txt)

    def refresh_tile(self, row, col):
        "Refresh a tile."
        values = self.map.get(row, col)
        for lay, val in values.items():
            if self.mod.layers[lay].visible:
                if val != 0:
                    if isinstance(val, int):
                        tex = self.mod.layers[lay].res[val]
                    elif isinstance(val, dict):
                        tex = self.mod.layers[lay].res[val['val']]
                    else:
                        raise Exception('[ERROR] Wrong type of val: ' + type(val))
                    self.canvas.create_image(col * 32, row * 32, anchor=NW, image=tex.tkimg)
        if self.options['show_grid']:
            self.canvas.create_rectangle(col * 32, row * 32, (col + 1) * 32, (row + 1) * 32, outline='black')

    def refresh_map(self):
        "Refresh the entire map."
        self.canvas.delete("all")
        img = Image.new('RGBA', (self.map.width * 32, self.map.height * 32), color='black')
        for row in range(0, self.map.height):
            for col in range(0, self.map.width):
                val = self.map.get(row, col)
                for lay, val in val.items():
                    if self.mod.layers[lay].visible:
                        if val != 0:
                            if isinstance(val, int):
                                tex = self.mod.layers[lay].res[val]
                            elif isinstance(val, dict):
                                tex = self.mod.layers[lay].res[val['val']]
                            else:
                                raise Exception('[ERROR] Wrong type of val: ' + type(val))
                            img.alpha_composite(tex.img, (col * 32, row * 32))
                            #img.paste(tex.img, (col * 32, row * 32))
                if self.options['show_grid']:
                    d = ImageDraw.Draw(img)
                    d.rectangle((col * 32, row * 32, (col + 1) * 32, (row + 1) \
                                 * 32), fill=None, outline='black', width=1)
        self.background = ImageTk.PhotoImage(img)
        self.canvas.create_image(0, 0, anchor=NW, image=self.background)
        self.refresh_title()
        return img

    def refresh_status(self, x32=None, y32=None):
        "Refresh the status bar."
        apply = self.mod.layer.apply
        pencil = self.mod.layer.pencil
        start = f"layer = {self.mod.layer.name} apply = {apply} pencil = {pencil}x{pencil} "
        if x32 is None:
            old = self.var_status_bar_content.get()
            end = old.find('x/col')
            self.var_status_bar_content.set(start + old[end:])
        else:
            self.var_status_bar_content.set(start +
                                            f"x/col = {x32}, y/row = {y32}")

    def set_show_grid(self, index, value, op):
        "Set show grid."
        self.options['show_grid'] = not self.options['show_grid']
        if self.debug:
            print('set', 'i=', index, 'v=', value, 'op=', op, 'show_grid=', self.options['show_grid'])
        self.refresh_map()

    def set_show_statusbar(self, index, value, op):
        "Set show statusbar"
        if self.var_status_bar_display.get():
            if self.status_bar is None:
                self.status_bar = Label(self.content,
                                        textvariable=self.var_status_bar_content,
                                        relief=SUNKEN, anchor=E)
                self.status_bar.pack(side=BOTTOM, fill=X)
        else:
            if self.status_bar is not None:
                self.status_bar.destroy()
                self.status_bar = None

    #-----------------------------------------------------------
    # GUI building
    #-----------------------------------------------------------
    def build_gui(self):
        if self.debug:
            print("[INFO] Building GUI")
        self.tk = Tk()
        self.tk.protocol("WM_DELETE_WINDOW", self.exit_app)

        # Load images
        BASE_ICONS = True
        try:
            self.tk.iconbitmap(os.path.join('media', 'icons', 'editor.ico'))
            basedir = os.path.join('media', 'icons')
            self.icons['new'] = PhotoImage(file=os.path.join(basedir, 'Actions-document-new-icon.png'))
            self.icons['open'] = PhotoImage(file=os.path.join(basedir, 'Actions-document-open-icon.png'))
            self.icons['save'] = PhotoImage(file=os.path.join(basedir, 'Actions-document-save-icon.png'))
            self.icons['save_as'] = PhotoImage(file=os.path.join(basedir, 'Actions-document-save-as-icon.png'))
            self.icons['1x1'] = PhotoImage(file=os.path.join(basedir, 'Little.png'))
            self.icons['3x3'] = PhotoImage(file=os.path.join(basedir, 'Medium.png'))
            self.icons['5x5'] = PhotoImage(file=os.path.join(basedir, 'Big.png'))
        except TclError:
            if self.debug:
                print("[ERROR] Unable to load button icons. No button will be created.")
            BASE_ICONS = False

        if self.debug:
            print("[INFO]     Creating menu")
        # Menu
        menu = Menu(self.tk)
        self.tk.config(menu=menu)
        filemenu = Menu(menu, tearoff=0)
        menu.add_cascade(label="File", menu=filemenu)
        filemenu.add_command(label="New...", command=self.menu_file_new, accelerator="Ctrl+N")
        filemenu.add_command(label="Resize...", command=self.menu_file_resize, accelerator="Ctrl+R")
        filemenu.add_command(label="Open...", command=self.menu_file_open, accelerator="Ctrl+O")
        filemenu.add_command(label="Save", command=self.menu_file_save, accelerator="Ctrl+S")
        filemenu.add_command(label="Save As...", command=self.menu_file_save_as)
        filemenu.add_separator()
        filemenu.add_command(label="Exit", command=self.menu_file_exit, accelerator="Ctrl+Q")

        editmenu = Menu(menu, tearoff=0)
        menu.add_cascade(label="Edit", menu=editmenu)
        editmenu.add_command(label="Undo", command=self.menu_undo, accelerator="Ctrl+Z")

        self.varShowGrid = BooleanVar()
        self.varShowGrid.set(self.options['show_grid'])
        self.varShowGrid.trace('w', self.set_show_grid)

        self.var_status_bar_display = BooleanVar()
        self.var_status_bar_display.set(True)
        self.var_status_bar_display.trace('w', self.set_show_statusbar)

        viewmenu = Menu(menu, tearoff=0)
        menu.add_cascade(label="View", menu=viewmenu)
        viewmenu.add_command(label="Toolbar")
        viewmenu.add_checkbutton(label="Status Bar",
                                 variable=self.var_status_bar_display)
        #viewmenu.add_command(label="Animate")
        viewmenu.add_command(label="Mini Map")
        viewmenu.add_checkbutton(label="Show Grid", variable=self.varShowGrid)

        self.varPencils = IntVar()
        self.varPencils.set(1)
        self.varPencils.trace('w', self.action_change_pencil)

        toolsmenu = Menu(menu, tearoff=0)
        menu.add_cascade(label="Tools", menu=toolsmenu)
        pencilmenu = Menu(toolsmenu, tearoff=0)
        toolsmenu.add_cascade(label="Pencils", menu=pencilmenu)
        pencilmenu.add_radiobutton(label="1x1", variable=self.varPencils, value=1)
        pencilmenu.add_radiobutton(label="3x3", variable=self.varPencils, value=3)
        pencilmenu.add_radiobutton(label="5x5", variable=self.varPencils, value=5)
        toolsmenu.add_separator()
        self.plugin_code_menu = Menu(toolsmenu, tearoff=0)
        toolsmenu.add_cascade(label="Plugins", menu=self.plugin_code_menu)
        toolsmenu.add_separator()
        toolsmenu.add_command(label="Export image", command=self.menu_tools_export_image)
        toolsmenu.add_command(label="Export binary", command=self.menu_tools_export_binary)

        self.varMods = StringVar()
        self.varMods.set(self.options['mod'])
        self.varMods.trace('w', self.menu_change_mod)

        modsmenu = Menu(menu, tearoff=0)
        menu.add_cascade(label="Mods", menu=modsmenu)
        for code, modinfo in self.mod.info.items():
            modsmenu.add_radiobutton(label=modinfo.name, variable=self.varMods, value=code)

        self.varVisibleLayers = {}
        self.varActiveLayer = StringVar()
        self.varActiveLayer.set(self.mod.layer.name)
        self.varActiveLayer.trace('w', self.action_change_layer)

        layersmenu = Menu(menu, tearoff=0)
        menu.add_cascade(label="Layers", menu=layersmenu)
        layervisibilitymenu = Menu(layersmenu, tearoff=0)
        layersmenu.add_cascade(label="Visible layers", menu=layervisibilitymenu)

        for name, layer in self.mod.layers.items():
            self.varVisibleLayers[name] = BooleanVar()
            self.varVisibleLayers[name].set(layer.visible)
            self.varVisibleLayers[name].trace('w', self.action_change_visibility)
            layervisibilitymenu.add_checkbutton(label=name.title(), variable=self.varVisibleLayers[name])#, value=True)

        activelayermenu = Menu(layersmenu, tearoff=0)
        layersmenu.add_cascade(label="Active layer", menu=activelayermenu)
        for name, layer in self.mod.layers.items():
            activelayermenu.add_radiobutton(label=name.title(), variable=self.varActiveLayer, value=name)

        self.varPlayer = IntVar()
        first_key = res = next(iter(self.mod.stakeholders))
        self.varPlayer.set(self.mod.stakeholders[first_key]['val'])

        playermenu = Menu(menu, tearoff=0)
        menu.add_cascade(label="Player", menu=playermenu)
        for side, content in self.mod.stakeholders.items():
            playermenu.add_radiobutton(label=side, variable=self.varPlayer, value=content['val'])

        helpmenu = Menu(menu, tearoff=0)
        menu.add_cascade(label="Help", menu=helpmenu)
        helpmenu.add_command(label="About...", command=self.menu_about)

        # Frame
        self.content = Frame(self.tk)
        self.content.pack_propagate(0) # don't let the widget inside it resize it
        self.tk.geometry(f"{self.options['width']}x{self.options['height']}+0+0")
        #self.tk.state('zoomed')

        # Button bar
        if self.debug:
            print("[INFO]     Creating toolbar")
        self.toolbar = Frame(self.content)
        self.toolbar_content = Frame(self.content)

        if BASE_ICONS:
            bt_new = Button(self.toolbar, image=self.icons['new'], width=32,
                            height=32, command=self.menu_file_new)
            bt_open = Button(self.toolbar, image=self.icons['open'], width=32,
                             height=32, command=self.menu_file_open)
            bt_save = Button(self.toolbar, image=self.icons['save'],
                             width=32, height=32, command=self.menu_file_save)
            bt_save_as = Button(self.toolbar, image=self.icons['save_as'],
                                width=32, height=32,
                                command=self.menu_file_save_as)

            self.bt_pencils = {}
            self.bt_pencils[1] = Button(self.toolbar, image=self.icons['1x1'],
                                        width=32, height=32,
                                        command=lambda: self.action_change_pencil('button', 1), relief=SUNKEN)
            self.bt_pencils[3] = Button(self.toolbar, image=self.icons['3x3'],
                                        width=32, height=32,
                                        command=lambda: self.action_change_pencil('button', 3), relief=RAISED)
            self.bt_pencils[5] = Button(self.toolbar, image=self.icons['5x5'],
                                        width=32, height=32,
                                        command=lambda: self.action_change_pencil('button', 5), relief=RAISED)

            bt_new.pack(side=LEFT)
            bt_open.pack(side=LEFT)
            bt_save.pack(side=LEFT)
            bt_save_as.pack(side=LEFT)
            sep1 = Label(self.toolbar, text=" ")
            sep1.pack(side=LEFT)
            for _, bt in self.bt_pencils.items():
                bt.pack(side=LEFT)
            sep2 = Label(self.toolbar, text=" ")
            sep2.pack(side=LEFT)

        self.load_mod()
        
        # Canvas
        if self.debug:
            print("[INFO]     Creating canvas")
        x_scrollbar = Scrollbar(self.content, orient=HORIZONTAL)
        y_scrollbar = Scrollbar(self.content, orient=VERTICAL)
        self.canvas = Canvas(self.content,
                             scrollregion=(0, 0, self.map.width * 32,
                                           self.map.height * 32),
                             xscrollcommand=x_scrollbar.set,
                             yscrollcommand=y_scrollbar.set)

        # Status bar
        if self.debug:
            print("[INFO]     Creating status bar")
        self.var_status_bar_content = StringVar()
        self.var_status_bar_content.set('Welcome')
        self.status_bar = Label(self.content,
                                textvariable=self.var_status_bar_content,
                                relief=SUNKEN, anchor=E)

        # Packing
        if self.debug:
            print("[INFO]     Packing GUI")
        self.content.pack(fill=BOTH, expand=True)
        self.toolbar.pack(side=TOP, fill=X)
        self.toolbar_content.pack(side=TOP, fill=X)
        y_scrollbar.pack(side=RIGHT, fill=Y)
        x_scrollbar.pack(side=BOTTOM, fill=X)
        self.canvas.pack(side=TOP, fill=BOTH, expand=True)
        x_scrollbar.config(command=self.canvas.xview)
        y_scrollbar.config(command=self.canvas.yview)
        self.status_bar.pack(side=BOTTOM, fill=X)

        # Canvas
        if self.debug:
            print("[INFO]     Binding")
        self.canvas.bind('<ButtonPress-1>', self.enter_drag)
        self.canvas.bind('<ButtonRelease-1>', self.put_texture)
        self.canvas.bind('<B1-Motion>', self.draw_drag)
        self.canvas.bind('<Motion>', self.refresh_status_bar)
        self.canvas.bind('<Leave>', self.invalid_drag)
        if self.debug: print("[INFO] GUI init end")

        #Shortcuts
        self.tk.bind('<Control-n>', self.menu_file_new)
        self.tk.bind('<Control-o>', self.menu_file_open)
        self.tk.bind('<Control-s>', self.menu_file_save)
        self.tk.bind('<Control-z>', self.menu_undo)
        self.tk.bind('<Control-q>', self.menu_file_exit)

    def run(self):
        self.tk.mainloop()

    #-----------------------------------------------------------
    # Apply texture functions
    #-----------------------------------------------------------
    def get_map_coord(self, event):
        x32 = int(self.canvas.canvasx(event.x) // 32)
        y32 = int(self.canvas.canvasy(event.y) // 32)
        return x32, y32

    def refresh_status_bar(self, event):
        x32, y32 = self.get_map_coord(event)
        if 0 <= x32 < 32 and 0 <= y32 < 32:
            self.refresh_status(x32, y32)

    def invalid_drag(self, event):
        self.start_x, self.start_y = None, None
        self.exit_drag(event)

    def exit_drag(self, event=None):
        self.drag = False
        if self.drag_rect is not None:
            self.canvas.delete(self.drag_rect)

    def enter_drag(self, event):
        self.start_x, self.start_y = self.get_map_coord(event)
        self.drag = True

    def put_texture(self, event):
        self.exit_drag(event)
        x32, y32 = self.get_map_coord(event)
        pencil = self.mod.layer.pencil
        val = self.mod.layer.res[self.mod.layer.apply].num
        #print(f'[INFO] {y32} {x32} l={self.layer.name} t={apply} p={pencil}')
        self.dirty = True
        self.previous.do(self, self.map, self.mod.layer, self.start_x,
                         self.start_y, x32, y32, val, pencil)
        self.refresh_title()

    def draw_drag(self, event):
        if self.mod.layer.pencil != 1 or not self.drag:
            return
        if self.drag_rect is not None:
            self.canvas.delete(self.drag_rect)
        x32, y32 = self.get_map_coord(event)
        minx = min(self.start_x, x32)
        miny = min(self.start_y, y32)
        maxx = max(self.start_x, x32)
        maxy = max(self.start_y, y32)
        self.drag_rect = self.canvas.create_rectangle(minx * 32, miny * 32,
                                                      (maxx + 1) * 32,
                                                      (maxy + 1) * 32,
                                                      outline='green', width=2)

    #-----------------------------------------------------------
    # Menu actions
    #-----------------------------------------------------------
    def menu_undo(self, event=None):
        self.previous.undo()

    def menu_file_new(self, event=None):
        d = ChooseSizeDialog(self, title='New Map')
        if d.width is not None:
            self.start_new_map('New map', d.width, d.height,
                               restart=True)

    def menu_file_resize(self, event=None):
        d = ChooseSizeDialog(self, title='Resize Map')
        if d.width is not None and (d.width != self.map.width or \
                                    d.height != self.map.height):
            self.map.resize(d.width, d.height)
            self.canvas.config(scrollregion=(0, 0, self.map.width * 32,
                                             self.map.height * 32))
            self.refresh_map()

    def menu_file_open(self, event=None):
        filepath = askopenfilename(initialdir=os.getcwd(),
                                   title="Select a file to open",
                                   filetypes=(("map files", "*.map"),
                                              ("all files", "*.*")))
        if filepath != '' and os.path.isfile(filepath):
            self.start_load_map(filepath)

    def menu_file_save(self, event=None):
        if self.is_linked():
            self.save_map()
        else:
            self.menu_file_save_as()

    def get_target(self):
        filepath = asksaveasfilename(initialdir=os.getcwd(),
                                     title="Select where to save",
                                     filetypes=(("map files", "*.map"),
                                                ("all files", "*.*")))
        if filepath != '':
            if not filepath.endswith('.map'):
                filepath += '.map'
            bn = os.path.basename(filepath)
            n = os.path.splitext(bn)[0]
            return n, filepath # mymap C:\...\mymap.map
        return None, None

    def menu_file_save_as(self):
        name, filepath = self.get_target()
        if name is not None:
            self.rename_map(name)
            self.save_map(filepath)

    def menu_file_exit(self, event=None):
        self.exit_app()

    def menu_about(self):
        info = """
Teddy, the Tile Grid Editor (or TGE), is a tool for editing grid of tiles.

It is designed to be simple to use and modify to your own needs.
It is programmed with Python and Tkinter for the interface.
It only uses the library Pillow as an external dependency.

Damien Gouteux - 2020 - Made with â¥ in Occitania\n\n"""
        info += "Actual mod: " + str(self.mod)
        #for _, mod in self.mod.info.items():
        #    info += (str(mod) + '\n')
        showinfo("About Teddy", info)

    def menu_tools_check(self):
        if self.debug: print('Checking map conformity')

    def menu_tools_export_binary(self):
        content = struct.pack('<hlf', 1, 2, 3.5) # h:short=2 l:long=4 f:float=4
        file = open(f"{self.map.name}.bin", "wb")
        file.write(content)
        file.close()
        if self.debug:
            print(f"[INFO] Map exported as binary in file {self.map.name}.bin")

    def menu_tools_export_image(self):
        img = self.refresh_map()
        img.save(f'{self.map.name}.png')
        if self.debug:
            print(f"[INFO] Map exported as image in file {self.map.name}.png")

    #def menu_choose_object(self):
    #    o = ChooseObjectDialog(self)
    #    if o.object is not None:
    #        self.current_layer = Map.OBJECT
    #        self.current_object = o.object

#-----------------------------------------------------------
# Main
#-----------------------------------------------------------

if __name__ == "__main__":
    app = Application(debug=True)
